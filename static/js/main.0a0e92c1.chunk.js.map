{"version":3,"sources":["Intro.js","InsertMoney.js","PayCheck.js","App.js","reportWebVitals.js","index.js"],"names":["Intro","a","networkData","chainId","chainName","rpcUrls","nativeCurrency","name","symbol","decimals","blockExplorerUrls","window","ethereum","request","method","params","init","accounts","accountConnection","subint","substr","subfinal","document","querySelector","innerHTML","Swal","fire","title","text","showCancelButton","confirmButtonText","imageUrl","imageAlt","then","result","isConfirmed","open","on","useEffect","changeAccounts","className","src","width","alt","id","onClick","type","addNetwork","InsertMoney","useState","amount","setAmount","balance","setBalance","payContract","network","setNetwork","BINANCENETWORK","doubleCheck","setDoubleChek","takeNetwork","console","log","provider","ethers","providers","Web3Provider","getNetwork","moreMoney","signer","getSigner","contract","Contract","ReceiverPays","abi","bnbAmount","utils","parseEther","toString","value","tx","showConfirmButton","imageWidth","imageHeight","wait","html","hash","icon","getBalanceUser","mensajeError","message","isInNetwork","account","recipientBalance","contractUserBalance","formatEther","Number","parseFloat","toFixed","onChange","e","target","replace","htmlFor","PayCheck","nonce","setNonce","payer","setPayer","signedHash","setSignedHash","claimPayment","from","data","payCheck","App","recipient","setRecipient","Math","floor","Date","getTime","setUser","contractAddress","setContractAddress","signatureAddress","useClippy","setClipboard","condition","setCondition","Signature","getMessageHash","sig","showDenyButton","denyButtonText","isDenied","href","rel","disabled","signPayment","style","backgroundColor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0a0e92c1.chunk.js","sourcesContent":["import { useEffect } from 'react';\r\nimport React  from 'react';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst Intro = () => {\r\n\r\n      useEffect(function () {\r\n        changeAccounts();\r\n      },[]);\r\n\r\n      async function addNetwork() {\r\n\r\n        let networkData = [{\r\n                chainId: \"0x61\",\r\n                chainName: \"BSCTESTNET\",\r\n                rpcUrls: [\"https://data-seed-prebsc-2-s3.binance.org:8545\"],\r\n                nativeCurrency: {\r\n                  name: \"BINANCE COIN\",\r\n                  symbol: \"BNB\",\r\n                  decimals: 18,\r\n                },\r\n                blockExplorerUrls: [\"https://testnet.bscscan.com/\"],\r\n              },\r\n            ];\r\n    \r\n          // agregar red o cambiar red\r\n          return window.ethereum.request({\r\n            method: \"wallet_addEthereumChain\",\r\n            params: networkData,\r\n          });\r\n      }\r\n\r\n      async function init() {  \r\n\r\n        if (typeof window.ethereum !== 'undefined') {\r\n                const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\r\n                let accountConnection = accounts[0];\r\n                let subint = accountConnection.substr(0,4);\r\n                let subfinal = accountConnection.substr(-4,4);\r\n                document.querySelector('#intro').innerHTML ='conectado con la cuenta: ' + subint + '...' + subfinal;\r\n        } else {\r\n          Swal.fire({\r\n            title: \"No tiene metamask instalado\",\r\n            text: \"Cambie de navegador o puede instalárselo apretando al botón\",\r\n            showCancelButton: true,\r\n            confirmButtonText: \"Instalar\",\r\n            imageUrl: './img/metamask-transparent.png',\r\n            imageAlt: \"Instalar metamask\",\r\n          }).then((result) => {\r\n            /* Read more about isConfirmed, isDenied below */\r\n            if (result.isConfirmed) {\r\n              window.open('https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn', '_blank', 'rel=\"noreferrer\"');  \r\n            }});\r\n        } \r\n      \r\n      }\r\n\r\n        // funcion que detecta los cambios de cuenta\r\n        async function changeAccounts() {\r\n              \r\n          if (typeof window.ethereum !== 'undefined') {\r\n\r\n            window.ethereum.on(\"accountsChanged\", async function () {\r\n\r\n              await init();\r\n              \r\n            });\r\n\r\n          }\r\n        }\r\n\r\n        function faucet() {\r\n          window.open('https://testnet.binance.org/faucet-smart', '_blank', 'rel=\"noreferrer\"');  \r\n        }\r\n    \r\n    return (\r\n        <div className=\"App\">       \r\n        <div className=\"b-example-divider\"></div>\r\n        <div className=\"bg-dark container col-xl-10 col-xxl-8 px-4 py-5\">\r\n          <div className=\"row align-items-center g-lg-5 py-5\">\r\n            <h1  className=\"display-4 fw-bold lh-1 mb-3 text-white\">Canal de pago para red Ethereum o similares</h1>\r\n        </div>\r\n          </div>\r\n          <div className=\"bg-dark container col-xl-10 col-xxl-8 px-4 py-5\">\r\n            <div className=\"row align-items-center g-lg-5 py-5\">\r\n              <div className=\"col-lg-7 text-center text-lg-start\">\r\n              <h1  className=\"display-4 fw-bold lh-1 mb-3 text-white\">¿Qué es un canal de pago?</h1>\r\n                <p  className=\"col-lg-10 fs-4 text-white\">Un canal de pago, en inglés: <i>Payment Channel</i>, es una vía para realizar numerosas transacciones de una criptomoneda con el mínimo coste. </p>\r\n                <p  className=\"col-lg-10 fs-4 text-white\">La gran mayoría de las criptomonedas de segunda generación disponen de una gran limitación a la hora de realizar numerosas transacciones. No solo en tanto a la escalabilidad por segundo que pueda disponer la blockchain, sino por <strong>las altas comisiones existentes</strong> por cada transacción. Especialmente dolorosas son en la red Ethereum, que, a Septiembre del 2021, siguen siendo inasumibles para el envio de micropagos o para realizar un canal constante de los mismos, como por ejemplo, el envío mensual de nóminas a un número indeterminado de trabajadores.</p>\r\n                <p  className=\"col-lg-10 fs-4 text-white\">Con un canal de pago se pueden realizar  tantas transacciones como se desee en <strong>segundo plano</strong>, reduciendo así las transacciones reales en la  blockchain principal <strong>a únicamente dos</strong>. Volviendo al ejemplo de pago de una nómina, el pagador puede ingresar un dinero total y realizar <strong>tantos cheques a cobrar como empleados disponga</strong>. Una única transacción para ingresar, y una única transacción por empleado a cobrar.</p>\r\n                <p  className=\"col-lg-10 fs-4 text-white\"> <strong>Atención, </strong>Nuevo contrato deployado. Si usted metió dinero en el anterior contrato no lo podrá utilizar. Por suerte son tokens de testnet.</p>\r\n              </div>\r\n              <div className=\"col-md-10 mx-auto col-lg-5\">\r\n               <img src=\"./img/dibujo.png\" width=\"300\" alt=\"dibujo de canal de pago\"/>   \r\n              <div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n          <div className=\"bg-dark container col-xl-10 col-xxl-8 px-4 py-5\">\r\n            <div className=\"row align-items-center g-lg-5 py-5\">\r\n              <div className=\"col-lg-7 text-center text-lg-start\">\r\n                <h2  className=\"display-4 fw-bold lh-1 mb-3 text-white\">Usaremos la red Binance Smart Chain</h2>\r\n                <p  className=\"col-lg-10 fs-4 text-white\">Lo primero, deme su permiso para conectarme a su Metamask. La conexión automática de su metamask por parte de una DAPP es una mala práctica. Téngalo en cuenta a la hora de crear la suya. </p>\r\n                <p  className=\"col-lg-10 fs-4 text-white\"> Si usted <strong>no dispone</strong> de la red de pruebas de BSC, se instalará apretando <strong>el botón naranja</strong>. Si ya la dispone, cambiará a esa red automáticamente.</p>\r\n                <p  className=\"col-lg-10 fs-4 text-white\">Si no tenía la Red, tampoco tendra BNBs de prueba para hacer el tutorial. Apretando al boton azul usted podrá reclamar un BNB para poder crear un cheque.</p>\r\n              </div>\r\n              <div className=\"col-md-10 mx-auto col-lg-5\">\r\n                  <button id=\"btn-firma\"  onClick={() => init()} className=\"w-100 btn btn-lg btn-danger mb-4\" type=\"button\">Conectar Metamask</button>\r\n                    <button id=\"bnbNetwork\"  onClick={() => addNetwork()} className=\"w-100 btn btn-lg btn-warning mb-4\" type=\"button\">Añadir Red Binance Smart Chain de pruebas</button>\r\n\r\n                    <button id=\"faucet\"  onClick={() => faucet()} className=\"w-100 btn btn-lg btn-primary\" type=\"button\">Faucet de Binance</button>\r\n                    <hr className=\"my-4\"/>\r\n                    <form className=\"p-4 p-md-5 border rounded-3 bg-light\">\r\n                    <div className=\"form-floating mb-3\">\r\n                    </div>\r\n                    <hr className=\"my-4\"/>\r\n                    <small id=\"intro\" className=\"text-muted\">No conectado</small>\r\n                    </form>\r\n              <div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Intro;","import { useEffect, useState } from 'react';\r\nimport React  from 'react';\r\nimport { ethers } from 'ethers';\r\nimport ReceiverPays from './artifacts/contracts/ReceiverPays.sol/ReceiverPays.json';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst InsertMoney = () => {\r\n\r\n    const [amount, setAmount] = useState('0.1');\r\n    const [balance, setBalance] = useState('');\r\n    const payContract = \"0x65D56f700BF136b32162Ea82dAa55516d688B1c6\";\r\n    const [network, setNetwork] = useState('no-net');\r\n    const BINANCENETWORK = 'bnbt';\r\n    const [doubleCheck, setDoubleChek] = useState(0);\r\n\r\n    async function takeNetwork() {\r\n      console.log('dentro de takeNetwork')\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const network = await provider.getNetwork();\r\n      console.log('network', network.name);\r\n      setNetwork(network.name);\r\n    }\r\n\r\n    async function moreMoney() {\r\n\r\n      if (typeof window.ethereum !== 'undefined') {\r\n\r\n          if(network == BINANCENETWORK || doubleCheck == 1) {\r\n          const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n          const signer = provider.getSigner();\r\n          const contract = new ethers.Contract(payContract, ReceiverPays.abi, signer);\r\n          let bnbAmount = ethers.utils.parseEther(amount).toString();\r\n          try {\r\n            const tx = await contract.moreMoney({value: bnbAmount});\r\n            Swal.fire({\r\n              title: 'Procesando el ingreso',\r\n              text: 'Espere, y no actualice la página',\r\n              // icon: 'info',\r\n              showConfirmButton: false,\r\n              imageUrl: 'https://thumbs.gfycat.com/ConventionalOblongFairybluebird-size_restricted.gif',\r\n              imageWidth: 100,\r\n              imageHeight: 100,\r\n              imageAlt: 'Procesando el ingreso',\r\n  \r\n            });\r\n            const Ok = await tx.wait();\r\n            if(Ok) {\r\n              Swal.fire({\r\n              title:  `Se ha enviado ${amount} BNB al contrato ${payContract}`,\r\n              html: `<a href=\"https://testnet.bscscan.com/tx/${tx.hash}\" target=\"_blank\" rel=\"noreferrer\">Hash de la transacción</a>`,\r\n              icon: 'success',\r\n              confirmButtonText: 'Cerrar'\r\n            })};\r\n    \r\n            getBalanceUser();\r\n          } catch (err) {\r\n            let mensajeError = err.message;\r\n        \r\n            Swal.fire({\r\n              title: 'Ooops!',\r\n              text: `${mensajeError}`,\r\n              icon: 'error',\r\n              confirmButtonText: 'Cerrar'\r\n            })\r\n            console.log(\"Error: \", err)\r\n              }\r\n           } else {\r\n            setDoubleChek(1); // prevents double click in same function\r\n            isInNetwork();\r\n           }\r\n          }\r\n    }\r\n\r\n        async function isInNetwork() {\r\n        console.log('en isInNetwork');       \r\n          if(network !== 'no-net' || network === BINANCENETWORK) {\r\n            Swal.fire({\r\n                title: 'red',\r\n                //text: `Cambia a BSC si la tienes o sigue el siguiente tutorial para configurarla`,\r\n                text: 'Estás en la red '+network+', has de cambiar a la red '+BINANCENETWORK,\r\n                confirmButtonText: 'Cambiar o instalar red BNB de pruebas',\r\n                //imageUrl: 'https://i2.wp.com/criptotendencia.com/wp-content/uploads/2020/04/binance-smart-chain.jpg?fit=1200%2C674&ssl=1',\r\n                imageUrl: 'https://cryptodaily.io/wp-content/uploads/2021/07/p-2.png',\r\n                imageWidth: 300,\r\n                \r\n                imageAlt: 'Red Binance Smart Chain',\r\n              }).then((result) => {\r\n                /* Read more about isConfirmed, isDenied below */\r\n                if (result.isConfirmed) {\r\n                  addNetwork();\r\n                  //window.open('https://academy.binance.com/es/articles/connecting-metamask-to-binance-smart-chain', '_blank');  \r\n                }\r\n              }); \r\n          } else {\r\n            moreMoney();\r\n          }\r\n        }\r\n\r\n      useEffect(function () {\r\n        takeNetwork();\r\n        changeAccounts();\r\n   \r\n      },[network]);\r\n\r\n      async function getBalanceUser() {\r\n\r\n            const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const contract = new ethers.Contract(payContract, ReceiverPays.abi, signer);\r\n\r\n            try {\r\n              const contractUserBalance = await contract.recipientBalance(account);\r\n              let amount = ethers.utils.formatEther(contractUserBalance).toString();\r\n              let bnbAmount = Number.parseFloat(amount).toFixed(2);\r\n              setBalance(`Dispone de ${bnbAmount} BNB ingresados`);\r\n            } catch (err) {\r\n              let mensajeError = err.message;\r\n              Swal.fire({\r\n                title: 'Ooops!',\r\n                text: `${mensajeError}`,\r\n                icon: 'error',\r\n                confirmButtonText: 'Cerrar'\r\n              })\r\n              console.log(\"Error: \", err)\r\n            }\r\n\r\n      }\r\n\r\n        // funcion que detecta los cambios de cuenta\r\n        async function changeAccounts() {\r\n              \r\n          if (typeof window.ethereum !== 'undefined') {\r\n\r\n            window.ethereum.on(\"accountsChanged\", async function () {\r\n\r\n              await getBalanceUser();\r\n              \r\n            });\r\n\r\n          }\r\n        }\r\n\r\n        async function addNetwork() {\r\n\r\n          let networkData = [{\r\n                  chainId: \"0x61\",\r\n                  chainName: \"BSCTESTNET\",\r\n                  rpcUrls: [\"https://data-seed-prebsc-2-s3.binance.org:8545\"],\r\n                  nativeCurrency: {\r\n                    name: \"BINANCE COIN\",\r\n                    symbol: \"BNB\",\r\n                    decimals: 18,\r\n                  },\r\n                  blockExplorerUrls: [\"https://testnet.bscscan.com/\"],\r\n                },\r\n              ];\r\n      \r\n          // agregar red o cambiar red\r\n          return window.ethereum.request({\r\n            method: \"wallet_addEthereumChain\",\r\n            params: networkData,\r\n            \r\n          }).then(takeNetwork())\r\n          \r\n        }\r\n\r\n\r\n    \r\n    return (\r\n        <div className=\"App\">       \r\n        <div className=\"b-example-divider\"></div>\r\n          <div className=\"bg-dark container col-xl-10 col-xxl-8 px-4 py-5\">\r\n            <div className=\"row align-items-center g-lg-5 py-5\">\r\n              <div className=\"col-lg-7 text-center text-lg-start\">\r\n                <h2  className=\"display-4 fw-bold lh-1 mb-3 text-white\">Ingresar BNB al contrato</h2>\r\n                <p  className=\"col-lg-10 fs-4 text-white\">El contrato está preparado para recibir BNBs de cualquier cuenta.</p>  \r\n                <p  className=\"col-lg-10 fs-4 text-white\">Se controla que nadie pueda gastar más de lo que ingrese. Por defecto la cantidad es 0.1 BNB pero puede colocar la cantidad que desee.</p>\r\n                <p  className=\"col-lg-10 fs-4 text-white\">Si no ve su saldo ingresado en el contrato apriete el botón verde.</p> \r\n                <p  className=\"col-lg-10 fs-4 text-white\">Si usted realiza un cheque de 1 BNB y tiene en el contrato solo 0.5 ingresados <strong>el cheque no se cobrará ni se anulará</strong>. Puede ingresar posteriormente los 0.5 BNB faltantes para que el cobrador pueda ejecutar su cheque. </p>\r\n\r\n              </div>\r\n              <div className=\"col-md-10 mx-auto col-lg-5\">\r\n                <form className=\"p-4 p-md-5 border rounded-3 bg-light\">\r\n                    <div className=\"form-floating mb-3\">\r\n                      <input value={amount} onChange={e => setAmount(e.target.value.replace(',', '.'))} type=\"text\" className=\"form-control\" id=\"amountToSend\"/>\r\n                      <label htmlFor=\"amountToSend\">BNBs a ingresar</label>\r\n                    </div>\r\n                    <button id=\"btn-deposit\"  onClick={() => moreMoney()} className=\"w-100 btn btn-lg btn-primary\" type=\"button\">Ingresar</button>\r\n                    <hr className=\"my-4\"/>\r\n                    <button id=\"btn-balance\"  onClick={() => getBalanceUser()} className=\"btn-success w-100 btn btn-lg\" type=\"button\">Comprobar su balance</button>\r\n                    <hr className=\"my-4\"/>\r\n                    <small id=\"balance\" className=\"text-muted\">{balance}</small>\r\n                </form>\r\n              <div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default InsertMoney;","import { useState } from 'react';\r\nimport React  from 'react';\r\nimport { ethers } from 'ethers';\r\nimport ReceiverPays from './artifacts/contracts/ReceiverPays.sol/ReceiverPays.json';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst PayCheck = () => {\r\n\r\n    const [amount, setAmount] = useState('0.1');\r\n    const [nonce, setNonce] = useState(0);\r\n    const [payer, setPayer] = useState('');\r\n    const [signedHash, setSignedHash] = useState('');\r\n    const payContract = \"0x65D56f700BF136b32162Ea82dAa55516d688B1c6\";\r\n\r\n    async function payCheck() {\r\n\r\n      if (typeof window.ethereum !== 'undefined') {\r\n\r\n          const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n          const signer = provider.getSigner();\r\n          const contract = new ethers.Contract(payContract, ReceiverPays.abi, signer);\r\n          let bnbAmount = ethers.utils.parseEther(amount).toString();\r\n\r\n\r\n          try {\r\n\r\n            const tx = await contract.claimPayment(payer, bnbAmount, nonce, signedHash, {from: account});\r\n            Swal.fire({\r\n              title: 'Procesando el pago del cheque',\r\n              text: 'Espere. No actualice la página',\r\n              // icon: 'info',\r\n              showConfirmButton: false,\r\n              imageUrl: 'https://thumbs.gfycat.com/ConventionalOblongFairybluebird-size_restricted.gif',\r\n              imageWidth: 100,\r\n              imageHeight: 100,\r\n              imageAlt: 'Procesando el ingreso',\r\n  \r\n            });\r\n            const Ok = await tx.wait();\r\n            if(tx) {\r\n              Swal.fire({\r\n              title:  `Se ha envíado ${amount} BNB a la cuenta ${account}`,\r\n              html: `<a href=\"https://testnet.bscscan.com/tx/${tx.hash}\" target=\"_blank\" rel=\"noreferrer\">Hash de la transacción</a>`,\r\n              icon: 'success',\r\n              confirmButtonText: 'Cerrar'\r\n            })};\r\n            console.log('transaction ', tx);\r\n          } catch (err) {\r\n            let mensajeError = err.message;\r\n             \r\n            if (err.data) {\r\n  \r\n              if (err.data.message === 'execution reverted: Este cheque ya se ha pagado') {\r\n                mensajeError =  'Este cheque ya se ha pagado';\r\n              } else if(err.data.message === 'execution reverted: El pagador no dispone del dinero suficiente para pagarle. Reclame su ingreso'){\r\n                mensajeError =  'El pagador no dispone del dinero suficiente para pagarle. Reclame su ingreso';\r\n              } else {\r\n                console.log('error: ',mensajeError);\r\n              }\r\n            }\r\n        \r\n            Swal.fire({\r\n              title: 'Ooops!',\r\n              text: `${mensajeError}`,\r\n              icon: 'error',\r\n              confirmButtonText: 'Cerrar'\r\n            })\r\n            console.log(\"Error: \", err)\r\n          }\r\n      }\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className=\"App\">       \r\n        <div className=\"b-example-divider\"></div>\r\n          <div className=\"bg-dark container col-xl-10 col-xxl-8 px-4 py-5\">\r\n            <div className=\"row align-items-center g-lg-5 py-5\">\r\n              <div className=\"col-lg-7 text-center text-lg-start\">\r\n                <h2  className=\"display-4 fw-bold lh-1 mb-3 text-white\">Cobrar Cheque</h2>\r\n                <p  className=\"col-lg-10 fs-4 text-white\">Introduzca los datos requeridos para hacer efectivo su cheque. Recuerde estar usando la cuenta acreedora del cheque en su Metamask para poder cobrarlo. Cuidado al copiar con los espacios.</p>\r\n              </div>\r\n              <div className=\"col-md-10 mx-auto col-lg-5\">\r\n                <form className=\"p-4 p-md-5 border rounded-3 bg-light\">\r\n                  <div className=\"form-floating mb-3\">\r\n                    <input value={nonce} onChange={e => setNonce(e.target.value)} type=\"number\" className=\"form-control\" id=\"serie2\"/>\r\n                    <label htmlFor=\"serie2\">Serie del cheque</label>\r\n                  </div>\r\n                    <div className=\"form-floating mb-3\">\r\n                      <input value={amount} onChange={e => setAmount(e.target.value.replace(',', '.'))} type=\"text\" className=\"form-control\" id=\"amountToPay2\"/>\r\n                      <label htmlFor=\"amountToPay2\">BNBs a cobrar</label>\r\n                    </div>\r\n                    <div className=\"form-floating mb-3\">\r\n                      <input value={signedHash} onChange={e => setSignedHash(e.target.value)} type=\"text\" className=\"form-control\" id=\"signedHash\"/>\r\n                      <label htmlFor=\"signedHash\">Hash firmado</label>\r\n                    </div>\r\n                    <div className=\"form-floating mb-3 d-inline-flex\">\r\n                      <input value={payer} onChange={e => setPayer(e.target.value)} type=\"text\" className=\"form-control\" id=\"payer\"/>\r\n                      <label htmlFor=\"payer\">Pagador</label>\r\n                      <button type=\"button\" className=\"btn btn-secondary mx-3\" data-bs-toggle=\"modal\" data-bs-target=\"#pagadorModal\">\r\n                  <i className=\"fa fa-info\"></i>\r\n                  </button>\r\n                    </div>\r\n                    <button id=\"btn-receive\"  onClick={() => payCheck()} className=\"w-100 btn btn-lg btn-primary\" type=\"button\">Cobrar</button>\r\n\r\n                    <hr className=\"my-4\"/>\r\n                </form>\r\n              <div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* Modal de informacion */}\r\n      <div className=\"modal fade\" id=\"pagadorModal\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" aria-labelledby=\"pagadorModalLabel\" aria-hidden=\"true\">\r\n  <div className=\"modal-dialog\">\r\n    <div className=\"modal-content\">\r\n      <div className=\"modal-header\">\r\n        <h5 className=\"modal-title\" id=\"pagadorModalLabel\">Registro del pagador</h5>\r\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n      </div>\r\n      <div className=\"modal-body\">\r\n   Ya que ésta DAPP tiene una intención divulgativa, el contrato de pago tiene que estar disponible para diversos pagadores. Para poder realizar esa función es necesario que a la hora del cobro el acreedor determine quien es el que le debe el dinero. Éste usuario además habrá tenido que ingresar la cantidad prometida porque la seguridad del contrato <strong>rechazará todo pago de un pagador que no haya ingresado el dinero demandado</strong>. <br/><br/>\r\n    \r\n Los cheques que no se hayan podido cobrar por falta de fondos <strong>no se anulan</strong>. Es decir, si el pagador ingresa el dinero posteriormente a la reclamación del acreedor se podrá ejecutar el cobro sin problemas.  <br/><br/>\r\n \r\n Para eliminar la desconfianza entre las partes, propio de la naturaleza de todo contrato inteligente, se podría añadir una claúsula más para que no pudiese realizar cheques quien no disponga del dinero ingresado en el contrato pagador de antemano. Pero he considerado que ya he complicado bastante los contratos para quien desee estudiarlos, y por tanto, he decidido no implementar ésta importante claúsula para no complicar más los contratos de la DAAP. \r\n    </div>\r\n      <div className=\"modal-footer\">\r\n        <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n      {/* fin de modal de informacion */}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default PayCheck;","import './App.css';\nimport { useState } from 'react';\nimport Swal from 'sweetalert2';\nimport Signature from './artifacts/contracts/Signature.sol/Signature.json';\nimport Intro from './Intro';\nimport InsertMoney from './InsertMoney';\nimport PayCheck from './PayCheck';\nimport { ethers } from 'ethers';\nimport useClippy from 'use-clippy';\n\nfunction App() {\n\n  const [recipient, setRecipient] = useState('');\n  const [nonce, setNonce] = useState(Math.floor(new Date().getTime()/1000.0));\n  const [amount, setAmount] = useState('0.1');\n  const [user, setUser] = useState('');// 0x00e55244c13FfA6D6313718459D82536F43F6dcf\n  const [contractAddress, setContractAddress] = useState(\"0x65D56f700BF136b32162Ea82dAa55516d688B1c6\"); // contrato de cobro.\n  const signatureAddress = \"0x854F2CBa80dAe7989Dd5729Ed2a71A1923d43243\";\n  const [signedHash, setSignedHash] = useState('');\n  const [clipboard, setClipboard] = useClippy();\n  const [condition, setCondition] = useState(true);   \n\n            async function signPayment() {\n              if (typeof window.ethereum !== 'undefined') {\n                  const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });\n                  const provider = new ethers.providers.Web3Provider(window.ethereum);\n                  const signer = provider.getSigner();\n                  const contract = new ethers.Contract(signatureAddress, Signature.abi, signer);\n                  let bnbAmount = ethers.utils.parseEther(amount).toString();\n\n                  try {\n                    const hash = await contract.getMessageHash(recipient, bnbAmount, nonce, contractAddress);\n                     let sig = await window.ethereum.request({method:\"personal_sign\", params: [account, hash]});\n                      Swal.fire({\n                        title: 'Copie los datos para enviar al cobrador',\n                        text: `Numero de serie: ${nonce} Importe: ${amount} Pagador: ${account} Hash firmado: ${sig}`,\n                        showDenyButton: true,\n                        showCancelButton: true,\n                        confirmButtonText: `Copiar al portapapeles`,\n                        denyButtonText: `Solo quería ver como era`,\n                      }).then((result) => {\n                        /* Read more about isConfirmed, isDenied below */\n                        if (result.isConfirmed) {\n                          setClipboard(`Numero de serie: ${nonce} Importe: ${amount} Pagador: ${account} Hash firmado: ${sig}`);\n                          Swal.fire('Datos Copiados a su portapapeles', '', 'success')\n                        } else if (result.isDenied) {\n                          Swal.fire('El formulario conserva los datos si aún desea recuperarlos. En la consola de Javascript podrá encontrar el hash firmado.', '', 'info')\n                        }\n                      })\n                      console.log('hash firmado: ', sig);\n                      setSignedHash(sig);\n                      setUser(account);\n\n                  } catch (err) {\n                    let mensajeError = err.message;\n                    Swal.fire({\n                      title: 'Ooops!',\n                      text: `${mensajeError}`,\n                      icon: 'error',\n                      confirmButtonText: 'Cerrar'\n                    })\n                    console.log(\"Error: \", err)\n                  }\n              }\n            }\n\n    return ( \n\n  <div className=\"App\">\n    <Intro/>   \n      <InsertMoney/>\n      <div className=\"bg-dark container col-xl-10 col-xxl-8 px-4 py-5\">\n        <div className=\"row justify-content-md-center\">\n        <h3 className=\"text-white text-center col-lg-4\">¿Qué desea hacer?</h3>\n        <button className=\"btn btn-lg btn-primary col-lg-4\" onClick={() => setCondition(!condition)}> Crear Cheque / Cobrar Cheque </button>\n        </div>\n      </div>\n    <div className={condition ? '' : 'd-none'}>       \n      <div className=\"b-example-divider\"></div>\n        <div className=\"bg-dark container col-xl-10 col-xxl-8 px-4 py-5\">\n          <div className=\"row align-items-center g-lg-5 py-5\">\n            <div className=\"col-lg-7 text-center text-lg-start\">\n              <h2  className=\"display-4 fw-bold lh-1 mb-3 text-white\">Crear Cheque</h2>\n              <p  className=\"col-lg-10 fs-4 text-white\">Introduzca los datos del beneficiario y cantidad a abonar para que puedan ser firmados con la cuenta que tenga conectada.</p>\n              <p  className=\"col-lg-10 fs-4 text-white\">Después de que usted firme el Hash recibirá otro con su firma incluída. Junto a el le aparecerán los datos que tendría que mandar al cobrador del mismo. Tenga a mano el bloc de notas para copiarlos.</p>\n              <p  className=\"col-lg-10 fs-4 text-white\">Añada otra cuenta de su billetera como cobrador si usted quiere realizar también el cobro del cheque.</p> \n               <p  className=\"col-lg-10 fs-4 text-white\">El hash se puede firmar fuera de la red como verá en otros tutoriales. Sin embargo, yo utilizo otro contrato en la testnet. Si también desea verlo <a href=\"https://testnet.bscscan.com/address/0x854F2CBa80dAe7989Dd5729Ed2a71A1923d43243#code \" target=\"_blank\" rel=\"noreferrer\">aquí</a> lo tiene. </p>\n            </div>\n            <div className=\"col-md-10 mx-auto col-lg-5\">\n              <form className=\"p-4 p-md-5 border rounded-3 bg-light\">\n                <div className=\"form-floating mb-3 d-inline-flex\">\n                  <input value={contractAddress} onChange={e => setContractAddress(e.target.value)} type=\"text\" className=\"form-control\" id=\"contractAddress\" disabled/> \n                  <button type=\"button\" className=\"btn btn-secondary mx-3\" data-bs-toggle=\"modal\" data-bs-target=\"#contratoModal\">\n                  <i className=\"fa fa-info\"></i>\n                  </button>\n                  <label htmlFor=\"contractAddress\">Contrato de cobro</label>   \n                </div>\n                <div className=\"form-floating mb-3\">\n                  <input value={recipient} onChange={e => setRecipient(e.target.value)} type=\"text\" className=\"form-control\" id=\"recipient\"/>\n                  <label htmlFor=\"recipient\">Beneficiario</label>\n                </div>\n                <div className=\"form-floating mb-3 d-inline-flex\">\n                  <input value={nonce} onChange={e => setNonce(e.target.value)} type=\"number\" className=\"form-control\" id=\"serie\"/>\n                  <label htmlFor=\"serie\">Serie del cheque</label>\n                  <button type=\"button\" className=\"btn btn-secondary mx-3\" data-bs-toggle=\"modal\" data-bs-target=\"#serieModal\">\n                  <i className=\"fa fa-info\"></i>\n                  </button>\n                </div>\n                  <div className=\"form-floating mb-3\">\n                    <input value={amount} onChange={e => setAmount(e.target.value.replace(',', '.'))} type=\"text\" className=\"form-control\" id=\"amountToPay\"/>\n                    <label htmlFor=\"amountToPay\">BNBs a cobrar</label>\n                  </div>\n                  <button id=\"btn-firma\"  onClick={() => signPayment()} className=\"w-100 btn btn-lg btn-primary\" type=\"button\">Firmar</button>\n                  <hr className=\"my-4\"/>\n              </form>\n            <div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div className={condition ? 'd-none' : ''}>  \n    <PayCheck/>\n  </div>\n\n  {/* Modals de informacion*/}\n\n<div className=\"modal fade\" id=\"contratoModal\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" aria-labelledby=\"contratoModalLabel\" aria-hidden=\"true\">\n  <div className=\"modal-dialog\">\n    <div className=\"modal-content\">\n      <div className=\"modal-header\">\n        <h5 className=\"modal-title\" id=\"contratoModalLabel\">Contrato de pago en Hash</h5>\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n      </div>\n      <div className=\"modal-body\">\n      Existe un ataque que puede producirse de la forma siguiente:\n      <br/><br/>\n      Usted realiza algunos pagos con un contrato y luego decide destruirlo. Más tarde, implementa un nuevo contrato inteligente, con el mismo código, para realizar otros pagos. \n      Éste nuevo contrato desconoce las series de los cheques que se han pagado en la implementación anterior, por lo que el usuario puede volver a usar los mismos datos con el hash firmado para realizar un doble cobro. \n      Nos podemos proteger contra esto al incluir la dirección del contrato en el mensaje, y por tanto, solo se aceptarán los cheques firmados que correspondan con el contrato implementado para ellos.\n      </div>\n      <div className=\"modal-footer\">\n        <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div className=\"modal fade\" id=\"serieModal\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\"  aria-labelledby=\"serieModalLabel\" aria-hidden=\"true\">\n  <div className=\"modal-dialog\">\n    <div className=\"modal-content\">\n      <div className=\"modal-header\">\n        <h5 className=\"modal-title\" id=\"serieModalLabel\">Serie de los cheques</h5>\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n      </div>\n      <div className=\"modal-body\">\n    Nosotros creamos un número de serie único con un <i>stamp time</i> cuando cargamos la página. \n    Pero usted puede crear todos los cheques que desee con cualquier otra numeración. \n    Sin embargo, tenga en cuenta que si usted firma un cheque con un número de serie que ya se ha utilizado para abonar otro cheque por parte de otro usuario <strong>el suyo no podrá ser abonado</strong>.<br/><br/>\n    \n    Puede comprobar si un número de serie se ha utilizado desde las funciones <i>getters</i> que tenemos en el contrato. <br/><br/>\n    Para saber si una serie ya se ha utilizado use la función: <i>usedNonces</i>, para saber quien lo ha cobrado con la función: <i>noncesRecipients</i>, y la cantidad que se ha abonado con la función: <i>noncesAmount</i>.\n    Aquí dispone del enlace para que haga esas comprobaciones si es su deseo:<br/><br/>\n    <a href=\"https://testnet.bscscan.com/address/0x00e55244c13FfA6D6313718459D82536F43F6dcf#readContract\" target=\"_blank\" rel=\"noreferrer\"><i>Read Functions</i></a>\n    </div>\n      <div className=\"modal-footer\">\n        <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n      </div>\n    </div>\n  </div>\n</div>\n\n{/* Fin de los modals */}\n\n\n  {/* Footer */}\n  <footer className=\"text-center text-white my-3 container\" style={{backgroundColor: \"#0a4275\"}}>\n\n    <div className=\"p-4 pb-0\">\n      <section className=\"\">\n      <a className=\"text-decoration-none\" href=\"https://github.com/Cainuriel/ERC-Contracts/tree/main/payment-channel\" target=\"_blank\" rel=\"noreferrer\"> <p className=\"d-flex justify-content-center align-items-center\">\n          <span className=\"me-3\">Código en Github </span>\n          <i className=\"fab fa-github\"></i>\n        </p></a> \n      </section>\n    </div>\n    <div className=\"text-center p-3 container\"  style={{backgroundColor: \"rgba(0, 0, 0, 0.2)\"}}>\n    2021 <a className=\"text-white text-decoration-none\" href=\"https://cainuriel.github.io/\"> <img src='./favicon.ico'/> \n       Developer Superloper</a>\n    </div>\n   \n  </footer>\n\n\n\n</div>\n\n  );\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}